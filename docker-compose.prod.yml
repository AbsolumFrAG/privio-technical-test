services:
  # PostgreSQL Database
  database:
    image: postgres:17-alpine
    container_name: gametracker-db-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gametracker}
      POSTGRES_USER: ${POSTGRES_USER:-gametracker}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - gametracker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gametracker} -d ${POSTGRES_DB:-gametracker}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: gametracker-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
    expose:
      - "3000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - gametracker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: gametracker-frontend-prod
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - gametracker-network
    restart: unless-stopped

  # Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    container_name: gametracker-nginx
    ports:
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - gametracker-network
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local

networks:
  gametracker-network:
    driver: bridge